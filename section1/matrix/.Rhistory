res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (alpha +(beta)*(df[,2][i]))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
R_2 <- reg_ss/tot_ss
R_2
head(df)
plot(df$Temp, df$Gas, pch=16, col=df$Insul)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
colors = c(8,9)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
colors = c(5,9)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
colors = c(5,4)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
help("legend")
legend("topright", legend=c("before, after"), col = colors)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
legend(6,6, legend=c("before, after"), col = colors)
legend(6,6, legend=c("before, after"), col = colors, lty=1, cex=0.8)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
legend(6,6, legend=c("before, after"), col = colors, lty=1, cex=0.8)
legend(6,6, legend=c("before", "after"), col = colors, lty=1, cex=0.8)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
legend(6,6, legend=c("before", "after"), col = colors, lty=1, cex=0.8)
legend(6,6, legend=factor(df$Insul), col = colors, lty=1, cex=0.8)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul])
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
legend(6,6, legend=levels(df$Insul), col = colors, type='p', cex=0.8)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
lm <- lm(Gas ~ c(Temp, Insul), df)
help(lm)
lm <- lm(Gas ~ Temp + Insul, df)
summary(lm)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve( alpha + (beta)*x, col=2, lwd=2, add=T)
df$Temp
df$Insul
as.numeric(df$Insul)
as.numeric(df$Insul)-1
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve( beta_0 + (beta_1)*(df$Temp) + beta_2*(as.numeric(df$Insul)-1), col=2, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(df$Temp, beta_0 + (beta_1)*(df$Temp) + beta_2*(as.numeric(df$Insul)-1), col=2, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
plot(df$Temp, beta_0 + (beta_1)*(df$Temp) + beta_2*(as.numeric(df$Insul)-1), col=2, lwd=2, add=T)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
plot(df$Temp, beta_0 + (beta_1)*(df$Temp) + beta_2*(as.numeric(df$Insul)-1), col=2, lwd=2, add=T)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
plot(df$Temp, beta_0 + (beta_1)*(df$Temp) + beta_2*(as.numeric(df$Insul)-1), type='l', lwd=2, add=T)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=5, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
tot_ss <- 0
res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (beta_0 +(beta_1)*df[,2][i] *beta_2*(as.numeric(df[,1][i])-1))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
reg_ss
R_2 <- reg_ss/tot_ss
R_2
tot_ss <- 0
res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (beta_0 +(beta_1)*df[,2][i] + beta_2*(as.numeric(df[,1][i])-1))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
reg_ss
R_2 <- reg_ss/tot_ss
R_2
plot(beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df[,1])-1),1)
x <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df[,1])-1)
x
y_res <- y - x
plot(x, y_res)
y_res <- y_bar - x
plot(x, y_res)
y_res <- df$Temp - x
plot(x, y_res)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(df$Insul[i]) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(x) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(x), lty="dashed")
}
}
Temp
Temp
Temp
Temp
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(x) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(x), lty="dashed")
}
}
i <- 1
if(as.numeric(df$Insul[i])-1) z<-4
i <-50
if(as.numeric(df$Insul[i])-1) z<-4
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
x <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul[i])-1)
x <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1)
x
mu_hat <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1)
y_res <- df$Temp - mu_hat
plot(x, y_res)
y_res
df$Temp
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
df$Temp
mu_hat
y_res <- df$Gas - mu_hat
y_res
plot(mu_hat, y_res)
plot(mu_hat, y_res, pch=16, col=4)
lm <- lm(Gas ~ Temp * Insul, df)
summary(lm)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
beta_0 <-  6.85383
beta_1 <- -0.39324
beta_2 <- -2.12998
beta_3 <-  0.11530
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2 + beta_3*(df[,2][i]), lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
mu_hat <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1) +beta_3*(as.numeric(df$Insul)-1)*df[,2]
y_res <- df$Gas - mu_hat
plot(mu_hat, y_res, pch=16, col=4)
A = matrix((1,2),(3,4))
A = matrix[[1,2],[3,4]]
help("matrix")
A = as.matrix(c(1,2,3,4))
A
A = as.matrix(c(1,2,3,4), rows=2)
A
A = matrix(c(1,2,3,4), nrow=2)
A
B = A*2
B
A*B''
transpose
t(B)
t(B)*A
t(A)*B
t(A)*B*C
C=A*3
t(A)*B*C
t(B)*A*C
t(B)*t(C)*A
t(B)*t(C)*t(A)
t(B)*A*C
c*t(B)*A
C*t(B)*A
D = matrix(c(0,3,5,9),nrow=2)
D*t(B)*A
t(A)*B*D
t(A)*A
t(A)^2
A^2
A*t(A)
t(D)*t(B)*A
D*t(B)*A
B*A
B*A*C
t(A)*t(B)*C
t(A*C)*t(B)
t(B)*t(A)*C
t(B)*t(C)*A
t(C)*A*B
t(C)*A*t(B)
t(C)*t(A)*B
t(B)*t(A)*C
t(B*A*t(C))
t(C)*A*B
A*t(C)*B
A*B*C
A*(B*C)
(A*B)*C
(A*D)*C
A*D*C
A*(D*C)
D = D-2
A*(D*C)
A*D*C
A*t(B)*B
A
A*(t(B)*B)
t(B)*B
t(B)
help("f.test")
help("t.test")
var.test
help("var.test")
var.test(Gas ~ Temp, df,
alternative = "two.sided")
var.test(Gas ~ Temp, df)
var.test(Gas,Temp, df)
var.test(Gas,Temp, data =df)
levels(df)
factor(df)
df$group
var.test(df$Gas, df$Temp, df)
var.test(df$Gas, ratio=1, df$Temp, df)
var.test(df$Gas, df$Temp, ratio =1, data =df)
colors = c(5,6)
df <- whiteside
head(whiteside)
plot(df$Temp, df$Gas, pch=16, xlab="average external temperature", ylab = "gas consumption of a house")
lm <- lm(Gas ~ Temp, df)
summary(lm)
alpha <-  5.4861933
beta <- -0.2902082
# equation for straight line y = 5.48 + (-0.29)*x
curve( alpha + (beta)*x, col=2, lwd=2, add=T)
# compute sum of square residuals
sum <- 0
for (i in 1:length(df$Temp)) {
segments(df[,2][i],df[,3][i], df[,2][i], (alpha +(beta)*(df[,2][i])), col=3, lty="dashed")
sum <- sum + (df[,3][i] - (alpha +(beta)*(df[,2][i])))^2
}
tot_ss <- 0
res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (alpha +(beta)*(df[,2][i]))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
reg_ss
R_2 <- reg_ss/tot_ss
R_2
(R_2)^2/(1-R_2^2)
((R_2)^2/(1-R_2^2))*(2/53)
var.test(lm(Gas ~ Temp, df))
var.test(lm(Gas ~ Temp, df))
var.test(df$Gas, df$Temp)
((R_2)/(1-R_2))*(2/53)
((R_2)/(1-R_2))
0.18041/((R_2)/(1-R_2))
R_2
# adijust R squared is:
n <- 56
p <- 2
adj_r2 <- ((reg_ss)/(n-p))/(tot_ss/(n-1))
adj_r2
(adj_r2/(1-adj_r2))
(adj_r2/(1-adj_r2))*(2/53)
(adj_r2/(1-adj_r2))*(53/2)
((R_2)/(1-R_2))*(53/2)
47.28/((R_2)/(1-R_2))
53.99/2
1/26.99
((R_2)/(1-R_2))*(54/2)
((R_2)/(1-R_2))
((R_2)/2)
((R_2)*2)
((R_2)*2)/(1-R_2)
R_2
1-R_2
0.46/0.53
(0.46/0.53)*2
(0.46/0.53)*2/53
#################################################
# Laboratory 4 - 24/11/2021: Linear Regression ~#
#################################################
# load the library DAAG with the dataset nihills
library(DAAG)
nihills
n <- nrow(nihills)
str(nihills)
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$time, pch=19, xlab="distance", ylab="time")
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$timef, pch=19, xlab="distance", ylab="time")
# Alternatively
with(nihills, plot(dist, time, pch=19))
help(with)
# Fit the linear model 1: time = beta_0+beta_1*dist + epsilon
lm1 <- lm(time ~ dist, data=nihills)
summary(lm1)
# plot of the residuals
par(mfrow=c(2,2))
plot(lm1)
# Plot of the fitted values
par(mfrow=c(1,1))
with(nihills, plot(dist, time, pch=19))
abline(coef(lm1), col="red", lty="solid")
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3)
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3,lty="solid")
# or
curve(predict(lm1, data.frame(dist=x)), col="blue", lty="solid", lwd=2, add=TRUE)
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist), col="red")
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist))
points(nihills$dist, predict(lm1), col="red", pch=19, cex=0.8)
nihills[17,]
segments(nihills[17,]$dist,nihills[17,]$time,
nihills[17,]$dist,fitted(lm1)[17], lty="dashed")
# R_sq
Tot_SS <- with(nihills, sum((time-mean(time))^2))
Res_SS <- with(nihills, sum((predict(lm1)-time)^2))
Mod_SS <- with(nihills, sum((predict(lm1)-mean(time))^2))
R_sq <- 1-Res_SS/Tot_SS
Mod_SS/Tot_SS
with(nihills, cor(time, dist))^2
with(nihills, cor(time, dist))^2
library(PerformanceAnalytics)
library(PerformanceAnalytics)
chart.Correlation(nihills[,c("dist", "climb", "time")])
# read results of section 1, part 2
setwd("~/DSSC/hpc_assignment1/section1/matrix")
# read results of section 1, part 2
setwd("~/DSSC/hpc_assignment1/section1/matrix")
times <- data.frame(read.csv("results.csv"))
times <- data.frame(read.csv("3D_matrix.csv"))
times
#
B <- 19000
size <- 2*(2400*100*100)*4*(10^(-6))/(24*B) + 0.68*(10^(-6))
#
B <- 19000
lambda <- 0.68*(10^(-6))
size <- 2*(2400*100*100)*4*(10^(-6))/24
T <- size/B + lambda
lambda <- 0.68*(10^(-6))
size <- 2*(2400*100*100)*8*(10^(-6))/24
size/B
T <- size/B + lambda
# read results of section 1, part 2
setwd("~/DSSC/hpc_assignment1/section1/matrix")
times <- data.frame(read.csv("3D_matrix.csv"))
colnames(times) <- c("n_procs", "time_nonblocking", "time_blocking")
library("ggplot2")
times
# read results of section 1, part 2
setwd("~/DSSC/hpc_assignment1/section1/matrix")
times <- data.frame(read.csv("3D_matrix.csv"))
times
times <- data.frame(read.csv("3D_matrix.csv"))
times
#
B <- 19000
lambda <- 0.68*(10^(-6))
size <- 2*(2400*100*100)*8*(10^(-6))/24
T <- size/B + lambda
#
B <- 19900
lambda <- 0.68*(10^(-6))
size <- 2*(2400*100*100)*8*(10^(-6))/24
T <- size/B + lambda
size <- 2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
lambda <- 24*0.68*(10^(-6))
size <- 2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
#
B <- 19900
lambda <- 24*0.68*(10^(-6))
size <- 3*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
size <- 3*2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
times$Time.taken - times$Comp..time
#
B <- 19900
lambda <- 24*0.68*(10^(-6))
size <- 3*2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
#
B <- 10000
lambda <- 24*0.68*(10^(-6))
size <- 3*2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
# read csv assignment 1,section 1, part 2
library(ggplot2)
library(gridExtra)
library(grid)
setwd("~/DSSC/hpc_assignment1/section1/matrix")
#set table theme
color_df <- data.frame(color = c("#ffffff", "#bfdedd"), stringsAsFactors = FALSE)
my_table_theme <- ttheme_default(core=list(bg_params = list(fill = color_df$color[1:2], col=NA)), colhead =list(bg_params=list(fill ="#8bb0af")))
#times to sum matrices
times <- data.frame(read.csv("3D_matrix.csv"))
grid.table(times, rows=NULL, theme = my_table_theme)
#save table as png
png("3D_matrix_results.png")
grid.table(times, rows=NULL)
dev.off()
# compute theoretical times
B <- 10000
lambda <- 24*0.68*(10^(-6))
size <- 3*2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda
setwd("~/DSSC/hpc_assignment1/section1/matrix")
#set table theme
color_df <- data.frame(color = c("#ffffff", "#bfdedd"), stringsAsFactors = FALSE)
my_table_theme <- ttheme_default(core=list(bg_params = list(fill = color_df$color[1:2], col=NA)), colhead =list(bg_params=list(fill ="#8bb0af")))
#times to sum matrices
times <- data.frame(read.csv("3D_matrix.csv"))
grid.table(times, rows=NULL, theme = my_table_theme)
grid.table(times, rows=NULL)
