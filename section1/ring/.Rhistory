legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
x <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul[i])-1)
x <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1)
x
mu_hat <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1)
y_res <- df$Temp - mu_hat
plot(x, y_res)
y_res
df$Temp
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
beta_0 <-  6.55133
beta_1 <- -0.33670
beta_2 <- -1.56520
# equation for straight line y = beta_0 + beta_1*x + beta_2*z
curve(beta_0 + (beta_1)*(x) + beta_2, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2, lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
df$Temp
mu_hat
y_res <- df$Gas - mu_hat
y_res
plot(mu_hat, y_res)
plot(mu_hat, y_res, pch=16, col=4)
lm <- lm(Gas ~ Temp * Insul, df)
summary(lm)
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
beta_0 <-  6.85383
beta_1 <- -0.39324
beta_2 <- -2.12998
beta_3 <-  0.11530
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2 + beta_3*(df[,2][i]), lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
mu_hat <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1) +beta_3*(as.numeric(df$Insul)-1)*df[,2]
y_res <- df$Gas - mu_hat
plot(mu_hat, y_res, pch=16, col=4)
A = matrix((1,2),(3,4))
A = matrix[[1,2],[3,4]]
help("matrix")
A = as.matrix(c(1,2,3,4))
A
A = as.matrix(c(1,2,3,4), rows=2)
A
A = matrix(c(1,2,3,4), nrow=2)
A
B = A*2
B
A*B''
transpose
t(B)
t(B)*A
t(A)*B
t(A)*B*C
C=A*3
t(A)*B*C
t(B)*A*C
t(B)*t(C)*A
t(B)*t(C)*t(A)
t(B)*A*C
c*t(B)*A
C*t(B)*A
D = matrix(c(0,3,5,9),nrow=2)
D*t(B)*A
t(A)*B*D
t(A)*A
t(A)^2
A^2
A*t(A)
t(D)*t(B)*A
D*t(B)*A
B*A
B*A*C
t(A)*t(B)*C
t(A*C)*t(B)
t(B)*t(A)*C
t(B)*t(C)*A
t(C)*A*B
t(C)*A*t(B)
t(C)*t(A)*B
t(B)*t(A)*C
t(B*A*t(C))
t(C)*A*B
A*t(C)*B
A*B*C
A*(B*C)
(A*B)*C
(A*D)*C
A*D*C
A*(D*C)
D = D-2
A*(D*C)
A*D*C
A*t(B)*B
A
A*(t(B)*B)
t(B)*B
t(B)
help("f.test")
help("t.test")
var.test
help("var.test")
var.test(Gas ~ Temp, df,
alternative = "two.sided")
var.test(Gas ~ Temp, df)
var.test(Gas,Temp, df)
var.test(Gas,Temp, data =df)
levels(df)
factor(df)
df$group
var.test(df$Gas, df$Temp, df)
var.test(df$Gas, ratio=1, df$Temp, df)
var.test(df$Gas, df$Temp, ratio =1, data =df)
colors = c(5,6)
df <- whiteside
head(whiteside)
plot(df$Temp, df$Gas, pch=16, xlab="average external temperature", ylab = "gas consumption of a house")
lm <- lm(Gas ~ Temp, df)
summary(lm)
alpha <-  5.4861933
beta <- -0.2902082
# equation for straight line y = 5.48 + (-0.29)*x
curve( alpha + (beta)*x, col=2, lwd=2, add=T)
# compute sum of square residuals
sum <- 0
for (i in 1:length(df$Temp)) {
segments(df[,2][i],df[,3][i], df[,2][i], (alpha +(beta)*(df[,2][i])), col=3, lty="dashed")
sum <- sum + (df[,3][i] - (alpha +(beta)*(df[,2][i])))^2
}
tot_ss <- 0
res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (alpha +(beta)*(df[,2][i]))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
reg_ss
R_2 <- reg_ss/tot_ss
R_2
(R_2)^2/(1-R_2^2)
((R_2)^2/(1-R_2^2))*(2/53)
var.test(lm(Gas ~ Temp, df))
var.test(lm(Gas ~ Temp, df))
var.test(df$Gas, df$Temp)
((R_2)/(1-R_2))*(2/53)
((R_2)/(1-R_2))
0.18041/((R_2)/(1-R_2))
R_2
# adijust R squared is:
n <- 56
p <- 2
adj_r2 <- ((reg_ss)/(n-p))/(tot_ss/(n-1))
adj_r2
(adj_r2/(1-adj_r2))
(adj_r2/(1-adj_r2))*(2/53)
(adj_r2/(1-adj_r2))*(53/2)
((R_2)/(1-R_2))*(53/2)
47.28/((R_2)/(1-R_2))
53.99/2
1/26.99
((R_2)/(1-R_2))*(54/2)
((R_2)/(1-R_2))
((R_2)/2)
((R_2)*2)
((R_2)*2)/(1-R_2)
R_2
1-R_2
0.46/0.53
(0.46/0.53)*2
(0.46/0.53)*2/53
#################################################
# Laboratory 4 - 24/11/2021: Linear Regression ~#
#################################################
# load the library DAAG with the dataset nihills
library(DAAG)
nihills
n <- nrow(nihills)
str(nihills)
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$time, pch=19, xlab="distance", ylab="time")
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$timef, pch=19, xlab="distance", ylab="time")
# Alternatively
with(nihills, plot(dist, time, pch=19))
help(with)
# Fit the linear model 1: time = beta_0+beta_1*dist + epsilon
lm1 <- lm(time ~ dist, data=nihills)
summary(lm1)
# plot of the residuals
par(mfrow=c(2,2))
plot(lm1)
# Plot of the fitted values
par(mfrow=c(1,1))
with(nihills, plot(dist, time, pch=19))
abline(coef(lm1), col="red", lty="solid")
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3)
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3,lty="solid")
# or
curve(predict(lm1, data.frame(dist=x)), col="blue", lty="solid", lwd=2, add=TRUE)
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist), col="red")
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist))
points(nihills$dist, predict(lm1), col="red", pch=19, cex=0.8)
nihills[17,]
segments(nihills[17,]$dist,nihills[17,]$time,
nihills[17,]$dist,fitted(lm1)[17], lty="dashed")
# R_sq
Tot_SS <- with(nihills, sum((time-mean(time))^2))
Res_SS <- with(nihills, sum((predict(lm1)-time)^2))
Mod_SS <- with(nihills, sum((predict(lm1)-mean(time))^2))
R_sq <- 1-Res_SS/Tot_SS
Mod_SS/Tot_SS
with(nihills, cor(time, dist))^2
with(nihills, cor(time, dist))^2
library(PerformanceAnalytics)
library(PerformanceAnalytics)
chart.Correlation(nihills[,c("dist", "climb", "time")])
# read csv assignment 1, section 3
library(ggplot2)
library(gridExtra)
library(grid)
setwd("~/DSSC/hpc_assignment1/section3")
color_df <- data.frame(color = c("#ffffff", "#bfdedd"), stringsAsFactors = FALSE)
my_table_theme <- ttheme_default(core=list(bg_params = list(fill = color_df$color[1:2], col=NA)), colhead =list(bg_params=list(fill ="#8bb0af")))
#read csv about results obtained on cpu nodes
jacobi <- data.frame(read.csv("results.csv"))
jacobi$min_commtime <- jacobi$mintime - jacobi$jacobimin
jacobi$max_commtime <- jacobi$maxtime - jacobi$jacobimax
grid.table(jacobi, rows=NULL, theme = my_table_theme)
grid.newpage()
grid.table(jacobi, rows=NULL, theme = my_table_theme)
grid.table(jacobi_gpu, rows=NULL)
grid.table(jacobi, rows=NULL, theme = my_table_theme)
grid.newpage()
grid.table(jacobi, rows=NULL, theme = my_table_theme)
grid.newpage()
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
jacobi_gpu$max_commtime <- jacobi_gpu$maxtime - jacobi_gpu$jacobimax
grid.table(jacobi_gpu, rows=NULL)
grid.newpage()
#build table for cpu nodes
jacobi_res <- jacobi[,1:2]
#build table for cpu nodes
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res$t.usec <- c(0,0.24,0.24,0.24,0.68,0.68,0.68,1.24,1.24,1.24,1.24)
jacobi_res$'B [MB/s]' <- c(0,18927.55,18927.55,18927.55,19967.19,19967.19,19967.19,11899.06,11899.06,11899.06,11899.06)
subdomain <- 1200/jacobi_res$n_procs^(1/3)
jacobi_res$'C(L,N) [Mb]' <- c(0,subdomain[-1]^2*jacobi_res$k[-1]*16/1000000)
jacobi_res$'Tc(L,N) [s]' <- c(0,jacobi_res$'C(L,N) [Mb]'[-1]/(jacobi_res$'B [MB/s]'[-1] * 8) + jacobi_res$k[-1]*jacobi_res$t.usec[-1]*10^(-6))
jacobi_res$'P(L,N) [MLUP/sec]' <- 1200^3/((jacobi_res$mean_jacobi + jacobi_res$comm_time)*1000000)
png("jacobi_res.png", width=1000,height=480,bg = "white")
grid.table(jacobi_res, rows=NULL, theme = my_table_theme)
dev.off()
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res$t.usec <- c(0,0.24,0.24,0.24,0.68,0.68,0.68,1.24,1.24,1.24,1.24)
jacobi_res$'B [MB/s]' <- c(0,18927.55,18927.55,18927.55,19967.19,19967.19,19967.19,11899.06,11899.06,11899.06,11899.06)
subdomain <- 1200/jacobi_res$n_procs^(1/3)
jacobi_res$'C(L,N) [Mb]' <- c(0,subdomain[-1]^2*jacobi_res$k[-1]*16/1000000)
jacobi_res$'Tc(L,N) [s]' <- c(0,jacobi_res$'C(L,N) [Mb]'[-1]/(jacobi_res$'B [MB/s]'[-1] * 8) + jacobi_res$k[-1]*jacobi_res$t.usec[-1]*10^(-6))
jacobi_res$'P(L,N) [MLUP/sec]' <- 1200^3/((jacobi_res$mean_jacobi + jacobi_res$comm_time)*1000000)
png("jacobi_res.png", width=1000,height=480,bg = "white")
grid.table(jacobi_res, rows=NULL, theme = my_table_theme)
dev.off()
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res$t.usec <- c(0,0.24,0.24,0.24,0.68,0.68,0.68,1.24,1.24,1.24,1.24)
jacobi_res$'B [MB/s]' <- c(0,18927.55,18927.55,18927.55,19967.19,19967.19,19967.19,11899.06,11899.06,11899.06,11899.06)
subdomain <- 1200/jacobi_res$n_procs^(1/3)
jacobi_res$'C(L,N) [Mb]' <- c(0,subdomain[-1]^2*jacobi_res$k[-1]*16/1000000)
jacobi_res$'Tc(L,N) [s]' <- c(0,jacobi_res$'C(L,N) [Mb]'[-1]/(jacobi_res$'B [MB/s]'[-1] * 8) + jacobi_res$k[-1]*jacobi_res$t.usec[-1]*10^(-6))
jacobi_res$'P(L,N) [MLUP/sec]' <- 1200^3/((jacobi_res$mean_jacobi[1]/jacobi_res$n_procs + jacobi_res$comm_time)*1000000)
png("jacobi_cpu_res.png", width=1000,height=480,bg = "white")
grid.table(jacobi_res, rows=NULL, theme = my_table_theme)
dev.off()
jacobi_gpu_res <- jacobi_gpu[,1:2]
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
jacobi_gpu$max_commtime <- jacobi_gpu$maxtime - jacobi_gpu$jacobimax
grid.table(jacobi_gpu, rows=NULL)
grid.newpage()
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
jacobi_gpu$max_commtime <- jacobi_gpu$maxtime - jacobi_gpu$jacobimax
grid.table(jacobi_gpu, rows=NULL)
grid.newpage()
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
jacobi_gpu$mintime
#read csv about results obtained on gpu nodes
jacobi_gpu <- data.frame(read.csv("results_gpu.csv"))
jacobi_gpu$min_commtime <- jacobi_gpu$mintime - jacobi_gpu$jacobimin
jacobi_gpu$max_commtime <- jacobi_gpu$maxtime - jacobi_gpu$jacobimax
grid.table(jacobi_gpu, rows=NULL)
grid.newpage()
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12)
jacobi_res <- jacobi[,1:2]
jacobi_res$mean_time <- (jacobi$mintime +jacobi$maxtime)/2
jacobi_res$mean_jacobi <- (jacobi$jacobimin +jacobi$jacobimax)/2
jacobi_res$comm_time <- (jacobi_res$mean_time - jacobi_res$mean_jacobi)
jacobi_res$k <- c(0,4,6,6,4,6,6,6,6,12,12)
jacobi_res$MLUP <- jacobi[,7]
jacobi_res$t.usec <- c(0,0.24,0.24,0.24,0.68,0.68,0.68,1.24,1.24,1.24,1.24)
jacobi_gpu_res <- jacobi_gpu[,1:2]
jacobi_gpu_res$mean_time <- (jacobi_gpu$mintime +jacobi_gpu$maxtime)/2
jacobi_gpu_res$mean_jacobi <- (jacobi_gpu$jacobimin +jacobi_gpu$jacobimax)/2
jacobi_gpu_res$comm_time <- (jacobi_gpu_res$mean_time - jacobi_gpu_res$mean_jacobi)
jacobi_gpu_res$k <- c(0,4,6,6,4,6,6,6,6,12)
jacobi_gpu_res
jacobi_gpu_res$k <- c(0,4,6,6,4,6,6,6,12,12)
jacobi_gpu_res
jacobi_gpu_res$MLUP <- jacobi_gpu[,7]
jacobi_gpu_res$t.usec <- c(0,0.24,0.24,0.24,0.68,0.68,0.68,0.68,0.68,0.68)
jacobi_gpu_res$'B [MB/s]' <- c(0,18927.55,18927.55,18927.55,19967.19,19967.19,19967.19,19967.19,19967.19,19967.19)
subdomain <- 1200/jacobi_gpu_res$n_procs^(1/3)
jacobi_gpu_res$'C(L,N) [Mb]' <- c(0,subdomain[-1]^2*jacobi_gpu_res$k[-1]*16/1000000)
jacobi_gpu_res$'Tc(L,N) [s]' <- c(0,jacobi_res$'C(L,N) [Mb]'[-1]/(jacobi_res$'B [MB/s]'[-1] * 8) + jacobi_gpu_res$k[-1]*jacobi_gpu_res$t.usec[-1]*10^(-6))
jacobi_gpu_res$'P(L,N) [MLUP/sec]' <- 1200^3/((jacobi_gpu_res$mean_jacobi[1]/jacobi_gpu_res$n_procs  + jacobi_gpu_res$comm_time)*1000000)
grid.table(jacobi_gpu_res, rows=NULL, theme = my_table_theme)
png("jacobi_gpu_res.png", width=1000,height=480,bg = "white")
grid.table(jacobi_gpu_res, rows=NULL, theme = my_table_theme)
dev.off()
# Read results obtained by ring.c
setwd("~/DSSC/hpc_assignment1/section1/ring")
times <- data.frame(read.table("results.csv"))
times <- times[-1,]
times
times <- times[-1,]
colnames(times) <- c("n_procs", "time_nonblocking", "time_blocking")
library("ggplot2")
times$time_nonblocking
# Read results obtained by ring.c
setwd("~/DSSC/hpc_assignment1/section1/ring")
times <- data.frame(read.table("results.csv"))
times <- times[-1,]
colnames(times) <- c("n_procs", "time_nonblocking", "time_blocking")
library("ggplot2")
x <- as.numeric(times$n_procs)
#plot times for non blocking implementation
plot(x, times$time_nonblocking, type='l', xlab="N procs", ylab="Time", col=5, lwd=2, ylim=c(0,1.5*10^(-4)))
points(x, times$time_nonblocking,pch=16,col=5)
#plot times for blocking implementation
lines(x, times$time_blocking, type='l', xlab="N procs", ylab="Time", col=6, lwd=2)
points(x, times$time_blocking,pch=16,col=6)
abline(v = 24, lty = 2, lwd=1.5)
text(22, 0.0, "n_procs=24", pos = 4, srt=90)
#plot theoretical model for non blocking implementation
y1 <- x[1:24]*2*16*10^(-3)/19900 + 0.68*(10^(-6))
16
16
16
#plot theoretical model for non blocking implementation
y1 <- x[1:24]*2*16*10^(-3)/19900 + 0.68*(10^(-6))
y2 <- x[25:47]*2*16*10^(-3)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
#plot theoretical model for blocking implementation
y1 <- y1 + x[1:24]*0.5*16*10^(-3)/19900
y2 <- y2 + x[25:47]*0.5*16*10^(-3)/12200
lines(x, c(y1,y2), type='l', col="#a30f94", lty = 2,lwd=2)
legend(1, 0.00012, legend=c("Non blocking implementation", "nb model", "Blocking implementation", "nb. model"),
col=c(5,5,6,6), lty=c(1,2,1,2), lwd=2, cex=1.1, pt.cex = 0.8)
#plot theoretical model for non blocking implementation
y1 <- x[1:24]*2*2*10^(-6)/19900 + 0.68*(10^(-6))
y2 <- x[25:47]*2*2*10^(-6)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
#plot theoretical model for non blocking implementation
y1 <- (x[1:24])^2 *2*16*10^(-6)/19900 + 0.68*(10^(-6))
y2 <- (x[25:47])^2*2*16*10^(-6)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
#plot theoretical model for non blocking implementation
y1 <- x[1:24]*2*2*10^(-3)/19900 + 0.68*(10^(-6))
y2 <- x[25:47]*2*2*10^(-3)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
y2 <- x[25:47]*2*16*10^(-3)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
times$time_nonblocking
x[1:24]*2*16*10^(-3)/19900 + 0.68*(10^(-6))
#plot times for non blocking implementation
plot(x, times$time_nonblocking, type='l', xlab="N procs", ylab="Time", col=5, lwd=2, ylim=c(0,1.5*10^(-4)))
points(x, times$time_nonblocking,pch=16,col=5)
#plot times for blocking implementation
lines(x, times$time_blocking, type='l', xlab="N procs", ylab="Time", col=6, lwd=2)
points(x, times$time_blocking,pch=16,col=6)
abline(v = 24, lty = 2, lwd=1.5)
text(22, 0.0, "n_procs=24", pos = 4, srt=90)
#plot theoretical model for non blocking implementation
y1 <- x[1:24]*2*16*10^(-3)/19900 + 0.68*(10^(-6))
y2 <- x[25:47]*2*16*10^(-3)/12200 + 1.23*(10^(-6))
lines(x, c(y1,y2), type='l', col="#0f95a6", lty = 2,lwd=2)
x[1:24]*2*2*10^(-6)/19900 + 0.68*(10^(-6))
(x[1:24]^2)*2*2*10^(-6)/19900 + 0.68*(10^(-6))
times$time_nonblocking
# Read results obtained by ring.c
setwd("~/DSSC/hpc_assignment1/section1/ring")
times <- data.frame(read.table("results.csv"))
times <- times[-1,]
colnames(times) <- c("n_procs", "time_nonblocking", "time_blocking")
library("ggplot2")
x <- as.numeric(times$n_procs)
png("ring_results.png", width=1200, height = 800)
#plot times for non blocking implementation
plot(x, times$time_nonblocking, type='l', xlab="N procs", ylab="Time", col=5, lwd=2, ylim=c(0,1.5*10^(-4)))
points(x, times$time_nonblocking,pch=16,col=5)
#plot times for blocking implementation
lines(x, times$time_blocking, type='l', xlab="N procs", ylab="Time", col=6, lwd=2)
points(x, times$time_blocking,pch=16,col=6)
abline(v = 24, lty = 2, lwd=1.5)
text(22, 0.0, "n_procs=24", pos = 4, srt=90)
y1 <- x[1:24]*(2*2*10^(-6)/19900 + 0.68*(10^(-6)))
y2 <- x[25:47]*2*16*10^(-3)/12200 + 1.23*(10^(-6))
# Read results obtained by ring.c
setwd("~/DSSC/hpc_assignment1/section1/ring")
times <- data.frame(read.table("results.csv"))
times <- times[-1,]
colnames(times) <- c("n_procs", "time_nonblocking", "time_blocking")
library("ggplot2")
x <- as.numeric(times$n_procs)
png("ring_results.png", width=1200, height = 800)
#plot times for non blocking implementation
plot(x, times$time_nonblocking, type='l', xlab="N procs", ylab="Time", col=5, lwd=2, ylim=c(0,1.5*10^(-4)))
points(x, times$time_nonblocking,pch=16,col=5)
#plot times for blocking implementation
lines(x, times$time_blocking, type='l', xlab="N procs", ylab="Time", col=6, lwd=2)
points(x, times$time_blocking,pch=16,col=6)
abline(v = 24, lty = 2, lwd=1.5)
text(22, 0.0, "n_procs=24", pos = 4, srt=90)
