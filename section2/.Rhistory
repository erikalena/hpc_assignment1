geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core + socket + node
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=file)) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=file))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
#
geom_line(data = df, aes(x = as.factor(X.bytes), y = 0.2922 + X.bytes/(1.49*10^(-4)), color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = 0.2922 + X.bytes/(1.49*10^(-4)), color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core + socket + node
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=file)) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=file))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
#
geom_line(data = df, aes(x = as.factor(X.bytes), y = 0.2922 + X.bytes*(1.499*10^(-4)), color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = 0.2922 + X.bytes*(1.499*10^(-4)), color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core + socket + node
##############
plot_bandwidth <- function(file) {
df <- data.frame(read.csv(file))
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=str_sub(file,start=1,end=-3))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=str_sub(file,start=1,end=-3)))  +
geom_smooth(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=str_sub(file,start=1,end=-3))) +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
labs(x = "Message size (bytes)", y = "Bandwidth") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(bandwidth)
}
core <- plot_bandwidth("core_ucx.csv")
socket <- plot_bandwidth("socket_ucx.csv")
node <- plot_bandwidth("node_ucx.csv")
core + socket + node
substr("ciao",start=1,end=-2)
substr("ciao",start=1,end=3)
substr("ciao",1,3)
substr("ciao",1,-2)
substr("ciao",1,-1)
substr("ciao",2,-1)
substr("ciao",4,-1)
substr("ciao",4)
substr("ciao",4,0)
substr("ciao",2,0)
substr("ciao",2,3)
substr("ciao",1,3:4)
substr("ciao",1,4-1)
substr("ciao",1,length("ciao")-1)
length("ciao")
gsub('.{3}$', '', "ciao")
gsub('.{3}$', '', "ciao00")
##############
plot_bandwidth <- function(file) {
df <- data.frame(read.csv(file))
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=gsub('.{3}$', '', file)))  +
geom_smooth(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color=gsub('.{3}$', '', file))) +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
labs(x = "Message size (bytes)", y = "Bandwidth") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(bandwidth)
}
core <- plot_bandwidth("core_ucx.csv")
socket <- plot_bandwidth("socket_ucx.csv")
node <- plot_bandwidth("node_ucx.csv")
core + socket + node
View(core_ucx)
View(socket_ucx)
View(socket_ucx)
View(node_ucx)
View(node_ucx)
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], core_ucx)
summary(model)
model$coef
model$coef[1]
model$coef[1][1]
model$coef[1][2]
model$coef[1]*2
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], core_ucx)
lambda <- model$coef[1]
B <- model$coef[2]
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- model$coef[1]
B <- model$coef[2]
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Times") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core + socket + node
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], core_ucx)
summary(model)
i <- 16
model <-lm(t.usec.[1:i] ~ X.bytes[1:i], core_ucx)
summary(model)
i <- 15
model <-lm(t.usec.[1:i] ~ X.bytes[1:i], core_ucx)
summary(model)
x <- seq(-5,5,l=100)
y<-seq(-5,5,l=100)
x <- seq(-5,5,l=100)
y<-seq(-5,5,l=100)
plot(x,sqrt(25-x^2),type='l')
lines(x,-sqrt(25-x^2), type='')
lines(x,-sqrt(25-x^2), type='l')
plot(x,sqrt(25-x^2),type='l', ylim=c(-5,5))
lines(x,-sqrt(25-x^2), type='l')
plot(x,sqrt(25-x^2),type='l', ylim=c(-5,5), ylab='y')
lines(x,-sqrt(25-x^2), type='l')
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core + socket + node
model <-lm(t.usec.[15:30] ~ X.bytes[15:30], core_ucx)
summary(model)
model <-lm(M.bytes[1:i] ~ X.bytes[1:i], core_ucx)
head(core_ucx)
model <-lm(Mbytes.sec[1:i] ~ X.bytes[1:i], core_ucx)
model$coef
model <-lm(Mbytes.sec[15:30] ~ X.bytes[15:30], core_ucx)
model$coef
plot(core_ucx$t.usec., core_ucx$X.bytes)
attach(core_ucx)
(core_ucx$t.usec.[6]-core_ucx$t.usec.[5])/(core_ucx$X.bytes[6]-core_ucx$X.bytes[5])
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
core_ucx$t.usec.[6]-core_ucx$t.usec.[5]\
core_ucx$t.usec.[6]-core_ucx$t.usec.[5]
core_ucx$t.usec.
(core_ucx$t.usec.[16]-core_ucx$t.usec.[15])/(core_ucx$X.bytes[16]-core_ucx$X.bytes[15])
1/0.0001330566
model <-lm(M.bytes[1:i] ~ X.bytes[1:i], core_ucx)
model <-lm(Mbytes.sec[1:i] ~ X.bytes[1:i], core_ucx)
abline(model$coef)
abline(coef(model))
abline(coef(model))
model$coefficients
i
model <-lm(Mbytes.sec[1:i] ~ X.bytes[1:i], core_ucx)
model$coefficients
model <-lm(t.usec[1:i] ~ X.bytes[1:i], core_ucx)
model <-lm(t.usec.[1:i] ~ X.bytes[1:i], core_ucx)
model$coefficients
abline(coef(model))
plot(core_ucx$t.usec., core_ucx$X.bytes)
model <-lm(t.usec[1:i] ~ X.bytes[1:i], core_ucx)
model$coefficients
abline(coef(model))
model <-lm(t.usec[1:17] ~ X.bytes[1:17], core_ucx)
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], core_ucx)
model$coefficients
1/ 0.000149875
model$coefficients
abline(coef(model))
model <-lm(t.usec.[17:30] ~ X.bytes[17:30], core_ucx)
model$coefficients
model$coefficients
plot( core_ucx$X.bytes, core_ucx$t.usec.)
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], core_ucx)
model$coefficients
abline(coef(model))
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
# geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
# geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
abline(coef(model))
return(times)
}
core <- plot_times("core_ucx.csv")
core
abline(coef(model))
coef(model)
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
coef(model)
abline(coef(model))
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
node <- plot_times("node_ucx.csv")
core
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:17,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
core
View(core_ucx)
model <-lm(t.usec.[1:13] ~ X.bytes[1:13], df)
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:17,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- 0.20# model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
core
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
lambda <- 0.20# model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
core
model <-lm(t.usec.[1:17] ~ X.bytes[1:17], df)
coef(model)
model <-lm(t.usec.[1:20] ~ X.bytes[1:20], df)
coef(model)
model <-lm(t.usec.[1:18] ~ X.bytes[1:18], df)
coef(model)
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:18] ~ X.bytes[1:18], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
core
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:19] ~ X.bytes[1:19], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
socket <- plot_times("socket_ucx.csv")
core
##############
plot_times <- function(file) {
df <- data.frame(read.csv(file))
df<-df[1:24,]
model <-lm(t.usec.[1:24] ~ X.bytes[1:24], df)
lambda <- model$coef[1]
B <- model$coef[2]
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file))) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = t.usec., color=gsub('.{3}$', '', file)))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="model", group=1)) +
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_color_manual(values=col_legend)
return(times)
}
core <- plot_times("core_ucx.csv")
core
