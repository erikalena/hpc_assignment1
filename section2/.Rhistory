colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
beta_0 <-  6.85383
beta_1 <- -0.39324
beta_2 <- -2.12998
beta_3 <-  0.11530
colors = c(5,6)
plot(df$Temp, df$Gas, pch=16, col=colors[df$Insul], xlab="average external temperature", ylab = "gas consumption of a house")
legend(6,6, legend=levels(df$Insul), col = colors, lty=1, cex=0.8)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
# equation for straight line y = beta_0 + beta_1*x + beta_2*z +beta_3*(x*d)
curve(beta_0 + (beta_1)*(x) + beta_2 + beta_3*x, type='l', col=6, lwd=2, add=T)
curve(beta_0 + (beta_1)*(x), type='l', col=5, lwd=2, add=T)
for (i in 1:length(df$Temp)) {
if(as.numeric(df$Insul[i])-1) {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]) + beta_2 + beta_3*(df[,2][i]), lty="dashed")
}else {
segments(df[,2][i],df[,3][i], df[,2][i], beta_0 + (beta_1)*(df[,2][i]), lty="dashed")
}
}
mu_hat <- beta_0 +(beta_1)*df[,2] + beta_2*(as.numeric(df$Insul)-1) +beta_3*(as.numeric(df$Insul)-1)*df[,2]
y_res <- df$Gas - mu_hat
plot(mu_hat, y_res, pch=16, col=4)
A = matrix((1,2),(3,4))
A = matrix[[1,2],[3,4]]
help("matrix")
A = as.matrix(c(1,2,3,4))
A
A = as.matrix(c(1,2,3,4), rows=2)
A
A = matrix(c(1,2,3,4), nrow=2)
A
B = A*2
B
A*B''
transpose
t(B)
t(B)*A
t(A)*B
t(A)*B*C
C=A*3
t(A)*B*C
t(B)*A*C
t(B)*t(C)*A
t(B)*t(C)*t(A)
t(B)*A*C
c*t(B)*A
C*t(B)*A
D = matrix(c(0,3,5,9),nrow=2)
D*t(B)*A
t(A)*B*D
t(A)*A
t(A)^2
A^2
A*t(A)
t(D)*t(B)*A
D*t(B)*A
B*A
B*A*C
t(A)*t(B)*C
t(A*C)*t(B)
t(B)*t(A)*C
t(B)*t(C)*A
t(C)*A*B
t(C)*A*t(B)
t(C)*t(A)*B
t(B)*t(A)*C
t(B*A*t(C))
t(C)*A*B
A*t(C)*B
A*B*C
A*(B*C)
(A*B)*C
(A*D)*C
A*D*C
A*(D*C)
D = D-2
A*(D*C)
A*D*C
A*t(B)*B
A
A*(t(B)*B)
t(B)*B
t(B)
help("f.test")
help("t.test")
var.test
help("var.test")
var.test(Gas ~ Temp, df,
alternative = "two.sided")
var.test(Gas ~ Temp, df)
var.test(Gas,Temp, df)
var.test(Gas,Temp, data =df)
levels(df)
factor(df)
df$group
var.test(df$Gas, df$Temp, df)
var.test(df$Gas, ratio=1, df$Temp, df)
var.test(df$Gas, df$Temp, ratio =1, data =df)
colors = c(5,6)
df <- whiteside
head(whiteside)
plot(df$Temp, df$Gas, pch=16, xlab="average external temperature", ylab = "gas consumption of a house")
lm <- lm(Gas ~ Temp, df)
summary(lm)
alpha <-  5.4861933
beta <- -0.2902082
# equation for straight line y = 5.48 + (-0.29)*x
curve( alpha + (beta)*x, col=2, lwd=2, add=T)
# compute sum of square residuals
sum <- 0
for (i in 1:length(df$Temp)) {
segments(df[,2][i],df[,3][i], df[,2][i], (alpha +(beta)*(df[,2][i])), col=3, lty="dashed")
sum <- sum + (df[,3][i] - (alpha +(beta)*(df[,2][i])))^2
}
tot_ss <- 0
res_ss <- 0
reg_ss <- 0
for (i in 1:length(df$Temp)) {
y <- df[,3][i]
y_hat <- (alpha +(beta)*(df[,2][i]))
y_bar <- mean(df[,3])
tot_ss <- tot_ss  + (y - y_bar)^2
res_ss <- res_ss + (y - y_hat)^2
reg_ss <- reg_ss + (y_hat - y_bar)^2
}
tot_ss
reg_ss
R_2 <- reg_ss/tot_ss
R_2
(R_2)^2/(1-R_2^2)
((R_2)^2/(1-R_2^2))*(2/53)
var.test(lm(Gas ~ Temp, df))
var.test(lm(Gas ~ Temp, df))
var.test(df$Gas, df$Temp)
((R_2)/(1-R_2))*(2/53)
((R_2)/(1-R_2))
0.18041/((R_2)/(1-R_2))
R_2
# adijust R squared is:
n <- 56
p <- 2
adj_r2 <- ((reg_ss)/(n-p))/(tot_ss/(n-1))
adj_r2
(adj_r2/(1-adj_r2))
(adj_r2/(1-adj_r2))*(2/53)
(adj_r2/(1-adj_r2))*(53/2)
((R_2)/(1-R_2))*(53/2)
47.28/((R_2)/(1-R_2))
53.99/2
1/26.99
((R_2)/(1-R_2))*(54/2)
((R_2)/(1-R_2))
((R_2)/2)
((R_2)*2)
((R_2)*2)/(1-R_2)
R_2
1-R_2
0.46/0.53
(0.46/0.53)*2
(0.46/0.53)*2/53
#################################################
# Laboratory 4 - 24/11/2021: Linear Regression ~#
#################################################
# load the library DAAG with the dataset nihills
library(DAAG)
nihills
n <- nrow(nihills)
str(nihills)
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$time, pch=19, xlab="distance", ylab="time")
# scatterplot: dist (x) against time (y)
plot(nihills$dist, nihills$timef, pch=19, xlab="distance", ylab="time")
# Alternatively
with(nihills, plot(dist, time, pch=19))
help(with)
# Fit the linear model 1: time = beta_0+beta_1*dist + epsilon
lm1 <- lm(time ~ dist, data=nihills)
summary(lm1)
# plot of the residuals
par(mfrow=c(2,2))
plot(lm1)
# Plot of the fitted values
par(mfrow=c(1,1))
with(nihills, plot(dist, time, pch=19))
abline(coef(lm1), col="red", lty="solid")
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3)
# same as
curve( -0.32530 + 0.20094*x, add=T, col = 3,lty="solid")
# or
curve(predict(lm1, data.frame(dist=x)), col="blue", lty="solid", lwd=2, add=TRUE)
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist), col="red")
text(13,3,expression(time==hat(beta)[0]+hat(beta)[1]*dist))
points(nihills$dist, predict(lm1), col="red", pch=19, cex=0.8)
nihills[17,]
segments(nihills[17,]$dist,nihills[17,]$time,
nihills[17,]$dist,fitted(lm1)[17], lty="dashed")
# R_sq
Tot_SS <- with(nihills, sum((time-mean(time))^2))
Res_SS <- with(nihills, sum((predict(lm1)-time)^2))
Mod_SS <- with(nihills, sum((predict(lm1)-mean(time))^2))
R_sq <- 1-Res_SS/Tot_SS
Mod_SS/Tot_SS
with(nihills, cor(time, dist))^2
with(nihills, cor(time, dist))^2
library(PerformanceAnalytics)
library(PerformanceAnalytics)
chart.Correlation(nihills[,c("dist", "climb", "time")])
# read csv assignment 1,section 1, part 2
library(ggplot2)
library(gridExtra)
library(grid)
setwd("~/DSSC/hpc_assignment1/section1/matrix")
#set table theme
color_df <- data.frame(color = c("#ffffff", "#bfdedd"), stringsAsFactors = FALSE)
my_table_theme <- ttheme_default(core=list(bg_params = list(fill = color_df$color[1:2], col=NA)), colhead =list(bg_params=list(fill ="#8bb0af")))
#times to sum matrices
times <- data.frame(read.csv("3D_matrix.csv"))
grid.table(times, rows=NULL, theme = my_table_theme)
#save table as png
png("3D_matrix_results.png")
grid.table(times, rows=NULL,theme = my_table_theme)
dev.off()
#times to sum matrices
times <- data.frame(read.csv("3D_matrix.csv"))
times
colnames(times)
colnames(times) <- c("Matrix dims", "Topology", "Time taken", "Comp time")
grid.table(times, rows=NULL, theme = my_table_theme)
#save table as png
png("3D_matrix_results.png")
grid.table(times, rows=NULL,theme = my_table_theme)
dev.off()
# compute theoretical times
B <- 10000
lambda <- 24*0.68*(10^(-6))
size <- 3*2*(2400*100*100)*8*(10^(-6))
T <- size/B + lambda # ~ 0.1152
# compute theoretical times
B <- 10000
lambda <- 24*0.68*(10^(-6))
size <- 2*(2400*100*100)*8*(10^(-6))
T <- 3*(size/B + lambda) # ~ 0.1152
size/B
size/B *3
# read csv assignment 1, section 2
library(ggplot2)
library(RColorBrewer)
library(patchwork)
library(data.table)
library(ggpubr)
setwd("~/DSSC/hpc_assignment1/section2")
col_legend <- brewer.pal(n=8, name="Dark2")
##############
plot_times <- function(file) {
df1 <- data.frame(read.csv(paste0("csv/",file)))
if(startsWith(file, "intel"))
file =  substring(file, 7)
df <- df1[1:24,]
model <-lm(t.usec.[1:26] ~ X.bytes[1:26], df)
lambda <-  model$coef[1]
B <- model$coef[2]
print(file)
print(coef(model))
print(paste0("bandwith: ", 1/coef(model)[2]))
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), y = t.usec., color="empirical", group = 1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = t.usec., color="empirical", group = 1))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
# geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="fit lm model", group=1)) +
# geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="fit lm model", group=1)) +
geom_point(aes(as.factor(df$X.bytes), loess(t.usec. ~ X.bytes, df)$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(df$X.bytes), loess(t.usec. ~ X.bytes, df)$fitted, color="fit model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("empirical" = "#2bacbd", "comm. model" = "#cf5e25")) +
labs(title = sub("\\_.*", "", file))
if(!"t.usec.comp."  %in% colnames(df1)){
df1$t.usec.comp.[1:24] <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
fwrite(df1, paste0("csv/",file))
}
return(times)
}
plot_bandwidth <- function(file) {
df1 <- data.frame(read.csv(paste0("csv/",file)))
if(startsWith(file, "intel"))
file =  substring(file, 7)
df <- df1[1:24,]
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical"))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fit
#geom_point(aes(as.factor(df$X.bytes), loess(Mbytes.sec ~ X.bytes, df,degree=1)$fitted, color="fit model", group=1))+
#geom_line(aes(as.factor(df$X.bytes), loess(Mbytes.sec ~ X.bytes, df, degree=1)$fitted, color="fit model", group=1))+
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), color="fit model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), color="fit model", group=1)) +
# geom_line(linetype = "dashed",data = df, aes(x = as.factor(X.bytes), y = 12000, color="th. bandwidth", group=1)) +
labs(x = "Message size (bytes)", y = "Bandwidth") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("empirical" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504", "th. bandwidth" = "#000000")) +
labs(title = sub("\\_.*", "", file))
if(!"Mbytes.sec.comp."  %in% colnames(df1)){
df1$Mbytes.sec.comp.[1:24] <- round(df$X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), 4)
fwrite(df1, paste0("csv/",file))
}
return(bandwidth)
}
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/times_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_bandwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_bandwidth +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_shm <- function(core, socket,type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
core_times + socket_times +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/times_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
core_bandwidth + socket_bandwidth +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
#openmpi - cpu
##############
#ucx
plot_nshm("core_ucx.csv", "socket_ucx.csv", "node_ucx.csv", "ucx_openmpi_cpu")
#tcp
plot_nshm("core_tcp.csv", "socket_tcp.csv", "node_tcp.csv", "tcp_openmpi_cpu")
#vader
plot_shm("core_vader.csv", "socket_vader.csv", "vader_openmpi_cpu")
#openmpi - gpu
##############
#ucx
plot_nshm("core_ucx_gpu.csv", "socket_ucx_gpu.csv", "node_ucx_gpu.csv", "ucx_openmpi_gpu")
#tcp
plot_nshm("core_tcp_gpu.csv", "socket_tcp_gpu.csv", "node_tcp_gpu.csv", "tcp_openmpi_gpu")
#vader
plot_shm("core_vader_gpu.csv", "socket_vader_gpu.csv", "vader_openmpi_gpu")
#intel - cpu
##############
#ucx
plot_nshm("intel_core_ucx.csv", "intel_socket_ucx.csv", "intel_node_ucx.csv", "ucx_intel_cpu")
#tcp
plot_nshm("intel_core_tcp.csv", "intel_socket_tcp.csv", "intel_node_tcp.csv", "tcp_intel_cpu")
#vader
plot_shm("intel_core_shm.csv", "intel_socket_shm.csv","shm_intel_cpu")
#intel - gpu
##############
#ucx
plot_nshm("intel_core_ucx_gpu.csv", "intel_socket_ucx_gpu.csv", "intel_node_ucx_gpu.csv", "ucx_intel_gpu")
#tcp
plot_nshm("intel_core_tcp_gpu.csv", "intel_socket_tcp_gpu.csv", "intel_node_tcp_gpu.csv", "tcp_intel_gpu")
#vader
plot_shm("intel_core_shm_gpu.csv", "intel_socket_shm_gpu.csv", "shm_intel_gpu")
library(RColorBrewer)
library(patchwork)
library(data.table)
library(ggpubr)
setwd("~/DSSC/hpc_assignment1/section2")
col_legend <- brewer.pal(n=8, name="Dark2")
##############
plot_times <- function(file) {
df1 <- data.frame(read.csv(paste0("csv/",file)))
if(startsWith(file, "intel"))
file =  substring(file, 7)
df <- df1[1:24,]
model <-lm(t.usec.[1:26] ~ X.bytes[1:26], df)
lambda <-  model$coef[1]
B <- model$coef[2]
print(file)
print(coef(model))
print(paste0("bandwith: ", 1/coef(model)[2]))
times <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), y = t.usec., color="empirical", group = 1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = t.usec., color="empirical", group = 1))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = min(t.usec.) + X.bytes/max(Mbytes.sec), color="comm. model", group=1)) +
# fit
# geom_line(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="fit lm model", group=1)) +
# geom_point(data = df, aes(x = as.factor(X.bytes), y = lambda + X.bytes*B, color="fit lm model", group=1)) +
geom_point(aes(as.factor(df$X.bytes), loess(t.usec. ~ X.bytes, df)$fitted, color="fit model", group=1))+
geom_line(aes(as.factor(df$X.bytes), loess(t.usec. ~ X.bytes, df)$fitted, color="fit model", group=1))+
labs(x = "Message size (bytes)", y = "Time") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("empirical" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = sub("\\_.*", "", file))
if(!"t.usec.comp."  %in% colnames(df1)){
df1$t.usec.comp.[1:24] <- round(loess(t.usec. ~ X.bytes, df)$fitted, 4)
fwrite(df1, paste0("csv/",file))
}
return(times)
}
plot_bandwidth <- function(file) {
df1 <- data.frame(read.csv(paste0("csv/",file)))
if(startsWith(file, "intel"))
file =  substring(file, 7)
df <- df1[1:24,]
#bandwidth
bandwidth <- ggplot() +
# core ucx
geom_line(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical")) +
geom_point(data = df, aes(x = as.factor(X.bytes), group = 2, y = Mbytes.sec, color="empirical"))  +
# theoretical
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(min(t.usec.) + X.bytes/max(Mbytes.sec)), color="comm. model", group=1)) +
# fit
#geom_point(aes(as.factor(df$X.bytes), loess(Mbytes.sec ~ X.bytes, df,degree=1)$fitted, color="fit model", group=1))+
#geom_line(aes(as.factor(df$X.bytes), loess(Mbytes.sec ~ X.bytes, df, degree=1)$fitted, color="fit model", group=1))+
geom_line(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), color="fit model", group=1)) +
geom_point(data = df, aes(x = as.factor(X.bytes), y = X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), color="fit model", group=1)) +
# geom_line(linetype = "dashed",data = df, aes(x = as.factor(X.bytes), y = 12000, color="th. bandwidth", group=1)) +
labs(x = "Message size (bytes)", y = "Bandwidth") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
theme(legend.title = element_blank()) +
scale_colour_manual(values = c("empirical" = "#2bacbd", "comm. model" = "#cf5e25", "fit model" = "#297504")) +
labs(title = sub("\\_.*", "", file))
if(!"Mbytes.sec.comp."  %in% colnames(df1)){
df1$Mbytes.sec.comp.[1:24] <- round(df$X.bytes/(loess(t.usec. ~ X.bytes, df)$fitted), 4)
fwrite(df1, paste0("csv/",file))
}
return(bandwidth)
}
plot_nshm <- function(core, socket, node, type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
node_times <- plot_times(node)
core_times + socket_times + node_times +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/times_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
node_bandwidth <- plot_bandwidth(node)
core_bandwidth + socket_bandwidth + node_bandwidth +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
plot_shm <- function(core, socket,type) {
core_times <- plot_times(core)
socket_times <- plot_times(socket)
core_times + socket_times +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/times_", type, ".png"), width = 20, height = 8, dpi = 150)
core_bandwidth <- plot_bandwidth(core)
socket_bandwidth <- plot_bandwidth(socket)
core_bandwidth + socket_bandwidth +
plot_annotation(title =  gsub('_', ' ', type)) &  theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0( "images/bandwidth_", type, ".png"), width = 20, height = 8, dpi = 150)
}
#openmpi - cpu
##############
#ucx
plot_nshm("core_ucx.csv", "socket_ucx.csv", "node_ucx.csv", "ucx_openmpi_cpu")
#tcp
plot_nshm("core_tcp.csv", "socket_tcp.csv", "node_tcp.csv", "tcp_openmpi_cpu")
#vader
plot_shm("core_vader.csv", "socket_vader.csv", "vader_openmpi_cpu")
#openmpi - gpu
##############
#ucx
plot_nshm("core_ucx_gpu.csv", "socket_ucx_gpu.csv", "node_ucx_gpu.csv", "ucx_openmpi_gpu")
#tcp
plot_nshm("core_tcp_gpu.csv", "socket_tcp_gpu.csv", "node_tcp_gpu.csv", "tcp_openmpi_gpu")
#vader
plot_shm("core_vader_gpu.csv", "socket_vader_gpu.csv", "vader_openmpi_gpu")
#intel - cpu
##############
#ucx
plot_nshm("intel_core_ucx.csv", "intel_socket_ucx.csv", "intel_node_ucx.csv", "ucx_intel_cpu")
#tcp
plot_nshm("intel_core_tcp.csv", "intel_socket_tcp.csv", "intel_node_tcp.csv", "tcp_intel_cpu")
#vader
plot_shm("intel_core_shm.csv", "intel_socket_shm.csv","shm_intel_cpu")
#intel - gpu
##############
#ucx
plot_nshm("intel_core_ucx_gpu.csv", "intel_socket_ucx_gpu.csv", "intel_node_ucx_gpu.csv", "ucx_intel_gpu")
#tcp
plot_nshm("intel_core_tcp_gpu.csv", "intel_socket_tcp_gpu.csv", "intel_node_tcp_gpu.csv", "tcp_intel_gpu")
#vader
plot_shm("intel_core_shm_gpu.csv", "intel_socket_shm_gpu.csv", "shm_intel_gpu")
